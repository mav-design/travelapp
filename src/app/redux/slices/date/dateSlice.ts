import {  createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from "@app/store";


export interface DateSlice {
  value: Date;
  
}

const initialState: DateSlice = {
  value: new Date(),
  
};

export const dateSlice = createSlice({
  name: 'date',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setDate: (state,action:PayloadAction<number>) => {
      state.value =new Date(state.value.getFullYear(),state.value.getMonth(),action.payload)
    },
    setMonth: (state,action:PayloadAction<number>) => {
        state.value =new Date(state.value.getFullYear(),action.payload,state.value.getDate())
    },
    setYear: (state,action:PayloadAction<number>) => {
        state.value =new Date(action.payload,state.value.getMonth(),state.value.getDate())
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
});

export const { setDate,setMonth,setYear } = dateSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDate = (state: RootState) => state.date.value;

export default dateSlice.reducer;
